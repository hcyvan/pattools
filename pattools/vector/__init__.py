from .vector import extract_vector, methylation_vector_cluster
from .separating import vector_diff, mv_separating
from .support import extract_mvs
from pattools.cmd import command, Cmd
from pathlib import Path


@command('mv-extract', 'extract mvs')
class VectorRegionCmd(Cmd):
    def add_argument(self, parser):
        parser.add_argument('-i', '--input', required=True, help='Input file list')
        parser.add_argument('-r', '--region', required=True,
                            help='This parameter can be specified in one of the following formats: (1) a genomic region'
                                 'string, for example, chr4:6909897-6909899; or (2) a motif file generated by either'
                                 'the vector-multi or vector-diff algorithms.')
        parser.add_argument('-o', '--out', default=None,
                            help='The output file, If not set, output is sent to standard output.')

    def do(self, args):
        regions = []
        if Path(args.region).exists():
            with open(Path(args.region), 'r') as f:
                for line in f:
                    if line.startswith('#'):
                        continue
                    line = line.strip()
                    if line:
                        items = line.split('\t')
                        regions.append(f'{items[0]}:{items[1]}-{items[1]}')
        else:
            regions = args.region
        print(args.input, regions, args.out)
        extract_mvs(args.input, regions, args.out)


@command('mv-vectorization', 'Methylation vectors vectorization')
class VectorCmd(Cmd):
    def add_argument(self, parser):
        parser.add_argument('-i', '--input', required=True, help='Input file, *.motif.gz')
        parser.add_argument('-w', '--window', type=int, default='4',
                            help='Define the length of motif, such as ''3:CCT; 4: CCTT; 5:CCTTT'' ')
        parser.add_argument('-o', '--out', default=None,
                            help='The output file, If not set, output is sent to standard output.')

    def do(self, args):
        extract_vector(args.input, args.out, window=args.window)


@command('mv-clustering',
         'Methylation vectors clustering. This command supports MPI, which can accelerate calculations in HPC')
class VectorMultiCmd(Cmd):
    def add_argument(self, parser):
        parser.add_argument('-c', '--cpg-bed', required=True,
                            help='The cpg_bed file of the selected genome.')
        parser.add_argument('-i', '--input', required=True,
                            help='a list file in tsv format, which contains multiple sample files,'
                                 ' sample grouping, etc. eg: <MOTIF_FILE>  <GROUP_LABEL>')
        parser.add_argument('-w', '--window', type=int, default='4',
                            help='Define the length of motif, such as ''3:CCT; 4: CCTT; 5:CCTTT'' ')
        parser.add_argument('-p', '--process', type=int, default=1,
                            help='The number of processes used for processing')
        parser.add_argument('-r', '--region', default=None,
                            help='TThe region to be processed. If not set, the entire genome is processed.'
                                 ' eg: -r chr1:10000-15000')
        parser.add_argument('-m', '--cluster-method', choices=['HDBSCAN', 'DBSCAN', 'MRESC'],
                            default='HDBSCAN',
                            help='Algorithm for classifying all motifs in a window')
        parser.add_argument('--mvc-version', default='v2', help='The mvc version')
        parser.add_argument('-o', '--out', default=None,
                            help='The output file, If not set, output is sent to standard output.')

    def do(self, args):
        methylation_vector_cluster(args.input, args.cpg_bed, args.out, window=args.window,
                                   process=args.process, region=args.region, cluster=args.cluster_method,
                                   out_version=args.mvc_version)


@command('mv-separating', 'Identify and separate distinct MVs clusters. (generate by mv-clustering)')
class VectorSeparatingCmd(Cmd):
    def add_argument(self, parser):
        parser.add_argument('-i', '--input', required=True, help='The input merged vector files.'
                                                                 ' (generate by vector-multi)')
        parser.add_argument('--mvc-version', default='v2', help='The mvc version')
        parser.add_argument('-o', '--out', default=None,
                            help='The output file, If not set, output is sent to standard output.')
        parser.add_argument('-g', '--group', required=True, help='Output group-specific '
                                                                 'differential vector window')
        parser.add_argument('--frac-mvs', default=1.0, type=float, help='')
        parser.add_argument('--frac-samples', default=0.9, type=float, help='')
        parser.add_argument('--with-meta', action='store_true', help='')

    def do(self, args):
        if args.mvc_version == 'v2':
            mv_separating(args.input, args.group, args.frac_mvs, args.frac_samples, output_file=args.out,
                          with_meta=args.with_meta)
        else:
            vector_diff(args.input, args.group, args.out)
